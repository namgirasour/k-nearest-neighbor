# -*- coding: utf-8 -*-
"""ML_HW1_Exercise 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zKcTuNj5wW6vSnwUSBoEHc1MiJaUeOPt
"""

import pandas as pd
import numpy as np
#from numpy import genfromtxt
#import matplotlib.pyplot as plt
import math
from math import sqrt
import csv
#import operator

train_set = pd.read_csv('/mnist_train.csv', header=None )
test_set = pd.read_csv('/mnist_test.csv', header=None )

train_set

y_train= train_set.iloc [:,0]
x_train= train_set.iloc [::,1:]
print(len(x_train))
print(len(y_train))

y_test= test_set.iloc [:,0]
x_test= test_set.iloc [::,1:]
print(len(x_test))
print(len(y_test))
print(len(x_train))
print(len(y_train))

y_test

x_test

x_train

y_train

#def euc_dist(x, y):
  #return sum(
      #[(x_i - y_i) ** 2 
       #for x_i, y_i in zip(x, y)
       #]
  #) ** (0.5)
# def euc_dist(x, y):
#   return sum(
#       [(x_i - y_i) ** 2 for x_i, y_i in zip(x,y)]
#   ) ** (0.5)

#return np.sqrt(np.sum(np.subtract(x1, x2)**2)) #euclidean distance
#def euc_dist(row1, row2):
    #distance = 0
    #for i in range(row1-1):
        #distance += (row1[i] - row2[i])**2
    #return sqrt(distance)
def euc_dist(x1, x2):
    return np.sqrt(np.sum(np.subtract(x1, x2)** 2))

def get_training_distance(x_train, test_sample):
  return [euc_dist(np.array(train_sample), test_sample) for train_sample in x_train] #calculate distances of vectors in training data to test data

from pandas.core.groupby.generic import Index
def knn(x_train, y_train, x_test, y_test, k):
  y_pred = [] #predicted labels
  #print(x_test)
  for index in range(len(x_test)):
  #for test_sample_idx, test_sample in enumerate(x_test):
    row = x_test.iloc[index]
    training_distances = get_training_distance(x_train, np.array(row))
    #print(training_distances)
    sort_distance = [
        pair[0]
        for pair in sorted(
            enumerate(training_distances),
            key=lambda x: x[1] 
        )
    ]
    sk = [
        y_train[idx]
        for idx in sort_distance[:k]
    ]
    print(f'Point is {y_test[index]} and we guessed {sk}')
    #print(sk)
    #print(sort_distance)
    #y_sample = 10
    #y_pred.append(y_sample)
  return y_pred

def main():
  knn(x_train, y_train, x_test, y_test, 3)

if __name__ == '__main__':
  main()

import pandas as pd

from sklearn import datasets

# Load the IRIS dataset
mnist = datasets.load_digits()

df = pd.DataFrame(data=mnist.data)
df.head()